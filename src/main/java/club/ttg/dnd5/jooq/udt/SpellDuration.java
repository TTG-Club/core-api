/*
 * This file is generated by jOOQ.
 */
package club.ttg.dnd5.jooq.udt;


import club.ttg.dnd5.jooq.Public;
import club.ttg.dnd5.jooq.udt.records.SpellDurationRecord;

import org.jooq.Schema;
import org.jooq.UDTField;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.SchemaImpl;
import org.jooq.impl.UDTImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SpellDuration extends UDTImpl<SpellDurationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.spell_duration</code>
     */
    public static final SpellDuration SPELL_DURATION = new SpellDuration();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpellDurationRecord> getRecordType() {
        return SpellDurationRecord.class;
    }

    /**
     * The attribute <code>public.spell_duration.value</code>.
     */
    public static final UDTField<SpellDurationRecord, Long> VALUE = createField(DSL.name("value"), SQLDataType.BIGINT, SPELL_DURATION, "");

    /**
     * The attribute <code>public.spell_duration.unit</code>.
     */
    public static final UDTField<SpellDurationRecord, String> UNIT = createField(DSL.name("unit"), SQLDataType.VARCHAR(25), SPELL_DURATION, "");

    /**
     * The attribute <code>public.spell_duration.custom</code>.
     */
    public static final UDTField<SpellDurationRecord, String> CUSTOM = createField(DSL.name("custom"), SQLDataType.VARCHAR(25), SPELL_DURATION, "");

    /**
     * The attribute <code>public.spell_duration.concentration</code>.
     */
    public static final UDTField<SpellDurationRecord, Boolean> CONCENTRATION = createField(DSL.name("concentration"), SQLDataType.BOOLEAN, SPELL_DURATION, "");

    /**
     * No further instances allowed
     */
    private SpellDuration() {
        super(DSL.name("spell_duration"), null, null, DSL.comment(""), false);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC != null ? Public.PUBLIC : new SchemaImpl(DSL.name("public"));
    }
}
