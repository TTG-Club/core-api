/*
 * This file is generated by jOOQ.
 */
package club.ttg.dnd5.jooq.tables;


import club.ttg.dnd5.jooq.Keys;
import club.ttg.dnd5.jooq.Public;
import club.ttg.dnd5.jooq.tables.JooqUsers.UsersPath;
import club.ttg.dnd5.jooq.tables.records.OneTimeTokensRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JooqOneTimeTokens extends TableImpl<OneTimeTokensRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.one_time_tokens</code>
     */
    public static final JooqOneTimeTokens ONE_TIME_TOKENS = new JooqOneTimeTokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OneTimeTokensRecord> getRecordType() {
        return OneTimeTokensRecord.class;
    }

    /**
     * The column <code>public.one_time_tokens.uuid</code>.
     */
    public final TableField<OneTimeTokensRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.one_time_tokens.user_uuid</code>.
     */
    public final TableField<OneTimeTokensRecord, java.util.UUID> USER_UUID = createField(DSL.name("user_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.one_time_tokens.expiry_date</code>.
     */
    public final TableField<OneTimeTokensRecord, LocalDateTime> EXPIRY_DATE = createField(DSL.name("expiry_date"), SQLDataType.LOCALDATETIME(6), this, "");

    private JooqOneTimeTokens(Name alias, Table<OneTimeTokensRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JooqOneTimeTokens(Name alias, Table<OneTimeTokensRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.one_time_tokens</code> table reference
     */
    public JooqOneTimeTokens(String alias) {
        this(DSL.name(alias), ONE_TIME_TOKENS);
    }

    /**
     * Create an aliased <code>public.one_time_tokens</code> table reference
     */
    public JooqOneTimeTokens(Name alias) {
        this(alias, ONE_TIME_TOKENS);
    }

    /**
     * Create a <code>public.one_time_tokens</code> table reference
     */
    public JooqOneTimeTokens() {
        this(DSL.name("one_time_tokens"), null);
    }

    public <O extends Record> JooqOneTimeTokens(Table<O> path, ForeignKey<O, OneTimeTokensRecord> childPath, InverseForeignKey<O, OneTimeTokensRecord> parentPath) {
        super(path, childPath, parentPath, ONE_TIME_TOKENS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OneTimeTokensPath extends JooqOneTimeTokens implements Path<OneTimeTokensRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> OneTimeTokensPath(Table<O> path, ForeignKey<O, OneTimeTokensRecord> childPath, InverseForeignKey<O, OneTimeTokensRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OneTimeTokensPath(Name alias, Table<OneTimeTokensRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OneTimeTokensPath as(String alias) {
            return new OneTimeTokensPath(DSL.name(alias), this);
        }

        @Override
        public OneTimeTokensPath as(Name alias) {
            return new OneTimeTokensPath(alias, this);
        }

        @Override
        public OneTimeTokensPath as(Table<?> alias) {
            return new OneTimeTokensPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<OneTimeTokensRecord> getPrimaryKey() {
        return Keys.PK_ONE_TIME_TOKENS;
    }

    @Override
    public List<UniqueKey<OneTimeTokensRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UC_ONE_TIME_TOKENS_USER_UUID);
    }

    @Override
    public List<ForeignKey<OneTimeTokensRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ONE_TIME_TOKENS__FK_ONE_TIME_TOKENS_ON_USER_UUID);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.ONE_TIME_TOKENS__FK_ONE_TIME_TOKENS_ON_USER_UUID, null);

        return _users;
    }

    @Override
    public JooqOneTimeTokens as(String alias) {
        return new JooqOneTimeTokens(DSL.name(alias), this);
    }

    @Override
    public JooqOneTimeTokens as(Name alias) {
        return new JooqOneTimeTokens(alias, this);
    }

    @Override
    public JooqOneTimeTokens as(Table<?> alias) {
        return new JooqOneTimeTokens(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqOneTimeTokens rename(String name) {
        return new JooqOneTimeTokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqOneTimeTokens rename(Name name) {
        return new JooqOneTimeTokens(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqOneTimeTokens rename(Table<?> name) {
        return new JooqOneTimeTokens(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqOneTimeTokens where(Condition condition) {
        return new JooqOneTimeTokens(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqOneTimeTokens where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqOneTimeTokens where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqOneTimeTokens where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqOneTimeTokens where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqOneTimeTokens where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqOneTimeTokens where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqOneTimeTokens where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqOneTimeTokens whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqOneTimeTokens whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
