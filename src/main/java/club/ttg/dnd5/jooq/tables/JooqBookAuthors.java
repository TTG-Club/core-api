/*
 * This file is generated by jOOQ.
 */
package club.ttg.dnd5.jooq.tables;


import club.ttg.dnd5.jooq.Keys;
import club.ttg.dnd5.jooq.Public;
import club.ttg.dnd5.jooq.tables.JooqBooks.BooksPath;
import club.ttg.dnd5.jooq.tables.records.BookAuthorsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JooqBookAuthors extends TableImpl<BookAuthorsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.book_authors</code>
     */
    public static final JooqBookAuthors BOOK_AUTHORS = new JooqBookAuthors();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookAuthorsRecord> getRecordType() {
        return BookAuthorsRecord.class;
    }

    /**
     * The column <code>public.book_authors.book_id</code>.
     */
    public final TableField<BookAuthorsRecord, String> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.book_authors.author_name</code>.
     */
    public final TableField<BookAuthorsRecord, String> AUTHOR_NAME = createField(DSL.name("author_name"), SQLDataType.VARCHAR(255), this, "");

    private JooqBookAuthors(Name alias, Table<BookAuthorsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JooqBookAuthors(Name alias, Table<BookAuthorsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.book_authors</code> table reference
     */
    public JooqBookAuthors(String alias) {
        this(DSL.name(alias), BOOK_AUTHORS);
    }

    /**
     * Create an aliased <code>public.book_authors</code> table reference
     */
    public JooqBookAuthors(Name alias) {
        this(alias, BOOK_AUTHORS);
    }

    /**
     * Create a <code>public.book_authors</code> table reference
     */
    public JooqBookAuthors() {
        this(DSL.name("book_authors"), null);
    }

    public <O extends Record> JooqBookAuthors(Table<O> path, ForeignKey<O, BookAuthorsRecord> childPath, InverseForeignKey<O, BookAuthorsRecord> parentPath) {
        super(path, childPath, parentPath, BOOK_AUTHORS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BookAuthorsPath extends JooqBookAuthors implements Path<BookAuthorsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BookAuthorsPath(Table<O> path, ForeignKey<O, BookAuthorsRecord> childPath, InverseForeignKey<O, BookAuthorsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BookAuthorsPath(Name alias, Table<BookAuthorsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BookAuthorsPath as(String alias) {
            return new BookAuthorsPath(DSL.name(alias), this);
        }

        @Override
        public BookAuthorsPath as(Name alias) {
            return new BookAuthorsPath(alias, this);
        }

        @Override
        public BookAuthorsPath as(Table<?> alias) {
            return new BookAuthorsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<BookAuthorsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BOOK_AUTHORS__FK_BOOK_AUTHORS_ON_BOOK);
    }

    private transient BooksPath _books;

    /**
     * Get the implicit join path to the <code>public.books</code> table.
     */
    public BooksPath books() {
        if (_books == null)
            _books = new BooksPath(this, Keys.BOOK_AUTHORS__FK_BOOK_AUTHORS_ON_BOOK, null);

        return _books;
    }

    @Override
    public JooqBookAuthors as(String alias) {
        return new JooqBookAuthors(DSL.name(alias), this);
    }

    @Override
    public JooqBookAuthors as(Name alias) {
        return new JooqBookAuthors(alias, this);
    }

    @Override
    public JooqBookAuthors as(Table<?> alias) {
        return new JooqBookAuthors(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqBookAuthors rename(String name) {
        return new JooqBookAuthors(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqBookAuthors rename(Name name) {
        return new JooqBookAuthors(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqBookAuthors rename(Table<?> name) {
        return new JooqBookAuthors(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqBookAuthors where(Condition condition) {
        return new JooqBookAuthors(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqBookAuthors where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqBookAuthors where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqBookAuthors where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqBookAuthors where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqBookAuthors where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqBookAuthors where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqBookAuthors where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqBookAuthors whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqBookAuthors whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
