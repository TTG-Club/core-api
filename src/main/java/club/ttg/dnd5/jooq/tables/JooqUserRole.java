/*
 * This file is generated by jOOQ.
 */
package club.ttg.dnd5.jooq.tables;


import club.ttg.dnd5.jooq.Keys;
import club.ttg.dnd5.jooq.Public;
import club.ttg.dnd5.jooq.tables.JooqRoles.RolesPath;
import club.ttg.dnd5.jooq.tables.JooqUsers.UsersPath;
import club.ttg.dnd5.jooq.tables.records.UserRoleRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JooqUserRole extends TableImpl<UserRoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_role</code>
     */
    public static final JooqUserRole USER_ROLE = new JooqUserRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRoleRecord> getRecordType() {
        return UserRoleRecord.class;
    }

    /**
     * The column <code>public.user_role.role_id</code>.
     */
    public final TableField<UserRoleRecord, Long> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_role.user_uuid</code>.
     */
    public final TableField<UserRoleRecord, UUID> USER_UUID = createField(DSL.name("user_uuid"), SQLDataType.UUID.nullable(false), this, "");

    private JooqUserRole(Name alias, Table<UserRoleRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JooqUserRole(Name alias, Table<UserRoleRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.user_role</code> table reference
     */
    public JooqUserRole(String alias) {
        this(DSL.name(alias), USER_ROLE);
    }

    /**
     * Create an aliased <code>public.user_role</code> table reference
     */
    public JooqUserRole(Name alias) {
        this(alias, USER_ROLE);
    }

    /**
     * Create a <code>public.user_role</code> table reference
     */
    public JooqUserRole() {
        this(DSL.name("user_role"), null);
    }

    public <O extends Record> JooqUserRole(Table<O> path, ForeignKey<O, UserRoleRecord> childPath, InverseForeignKey<O, UserRoleRecord> parentPath) {
        super(path, childPath, parentPath, USER_ROLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UserRolePath extends JooqUserRole implements Path<UserRoleRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UserRolePath(Table<O> path, ForeignKey<O, UserRoleRecord> childPath, InverseForeignKey<O, UserRoleRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserRolePath(Name alias, Table<UserRoleRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserRolePath as(String alias) {
            return new UserRolePath(DSL.name(alias), this);
        }

        @Override
        public UserRolePath as(Name alias) {
            return new UserRolePath(alias, this);
        }

        @Override
        public UserRolePath as(Table<?> alias) {
            return new UserRolePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<UserRoleRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_ROLE__FK_USER_ROLE_ON_ROLE, Keys.USER_ROLE__FK_USER_ROLE_ON_USER);
    }

    private transient RolesPath _roles;

    /**
     * Get the implicit join path to the <code>public.roles</code> table.
     */
    public RolesPath roles() {
        if (_roles == null)
            _roles = new RolesPath(this, Keys.USER_ROLE__FK_USER_ROLE_ON_ROLE, null);

        return _roles;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.USER_ROLE__FK_USER_ROLE_ON_USER, null);

        return _users;
    }

    @Override
    public JooqUserRole as(String alias) {
        return new JooqUserRole(DSL.name(alias), this);
    }

    @Override
    public JooqUserRole as(Name alias) {
        return new JooqUserRole(alias, this);
    }

    @Override
    public JooqUserRole as(Table<?> alias) {
        return new JooqUserRole(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqUserRole rename(String name) {
        return new JooqUserRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqUserRole rename(Name name) {
        return new JooqUserRole(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqUserRole rename(Table<?> name) {
        return new JooqUserRole(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqUserRole where(Condition condition) {
        return new JooqUserRole(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqUserRole where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqUserRole where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqUserRole where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqUserRole where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqUserRole where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqUserRole where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqUserRole where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqUserRole whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqUserRole whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
