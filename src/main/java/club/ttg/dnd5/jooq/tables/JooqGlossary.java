/*
 * This file is generated by jOOQ.
 */
package club.ttg.dnd5.jooq.tables;


import club.ttg.dnd5.jooq.Indexes;
import club.ttg.dnd5.jooq.Keys;
import club.ttg.dnd5.jooq.Public;
import club.ttg.dnd5.jooq.tables.records.GlossaryRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JooqGlossary extends TableImpl<GlossaryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.glossary</code>
     */
    public static final JooqGlossary GLOSSARY = new JooqGlossary();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GlossaryRecord> getRecordType() {
        return GlossaryRecord.class;
    }

    /**
     * The column <code>public.glossary.url</code>.
     */
    public final TableField<GlossaryRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.glossary.name</code>.
     */
    public final TableField<GlossaryRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.glossary.english</code>.
     */
    public final TableField<GlossaryRecord, String> ENGLISH = createField(DSL.name("english"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.glossary.alternative</code>.
     */
    public final TableField<GlossaryRecord, String> ALTERNATIVE = createField(DSL.name("alternative"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.glossary.description</code>.
     */
    public final TableField<GlossaryRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.glossary.image_url</code>.
     */
    public final TableField<GlossaryRecord, String> IMAGE_URL = createField(DSL.name("image_url"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.glossary.is_hidden_entity</code>.
     */
    public final TableField<GlossaryRecord, Boolean> IS_HIDDEN_ENTITY = createField(DSL.name("is_hidden_entity"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.glossary.created_at</code>.
     */
    public final TableField<GlossaryRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.glossary.updated_at</code>.
     */
    public final TableField<GlossaryRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.glossary.username</code>.
     */
    public final TableField<GlossaryRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.glossary.tags</code>.
     */
    public final TableField<GlossaryRecord, String> TAGS = createField(DSL.name("tags"), SQLDataType.VARCHAR(255), this, "");

    private JooqGlossary(Name alias, Table<GlossaryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JooqGlossary(Name alias, Table<GlossaryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.glossary</code> table reference
     */
    public JooqGlossary(String alias) {
        this(DSL.name(alias), GLOSSARY);
    }

    /**
     * Create an aliased <code>public.glossary</code> table reference
     */
    public JooqGlossary(Name alias) {
        this(alias, GLOSSARY);
    }

    /**
     * Create a <code>public.glossary</code> table reference
     */
    public JooqGlossary() {
        this(DSL.name("glossary"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.GLOSSARY_NAME_INDEX);
    }

    @Override
    public UniqueKey<GlossaryRecord> getPrimaryKey() {
        return Keys.PK_GLOSSARY;
    }

    @Override
    public JooqGlossary as(String alias) {
        return new JooqGlossary(DSL.name(alias), this);
    }

    @Override
    public JooqGlossary as(Name alias) {
        return new JooqGlossary(alias, this);
    }

    @Override
    public JooqGlossary as(Table<?> alias) {
        return new JooqGlossary(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqGlossary rename(String name) {
        return new JooqGlossary(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqGlossary rename(Name name) {
        return new JooqGlossary(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqGlossary rename(Table<?> name) {
        return new JooqGlossary(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqGlossary where(Condition condition) {
        return new JooqGlossary(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqGlossary where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqGlossary where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqGlossary where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqGlossary where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqGlossary where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqGlossary where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqGlossary where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqGlossary whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqGlossary whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
