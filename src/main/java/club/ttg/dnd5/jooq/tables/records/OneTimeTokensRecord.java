/*
 * This file is generated by jOOQ.
 */
package club.ttg.dnd5.jooq.tables.records;


import club.ttg.dnd5.jooq.tables.JooqOneTimeTokens;

import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class OneTimeTokensRecord extends UpdatableRecordImpl<OneTimeTokensRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.one_time_tokens.uuid</code>.
     */
    public void setUuid(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.one_time_tokens.uuid</code>.
     */
    public UUID getUuid() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.one_time_tokens.user_uuid</code>.
     */
    public void setUserUuid(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.one_time_tokens.user_uuid</code>.
     */
    public UUID getUserUuid() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.one_time_tokens.expiry_date</code>.
     */
    public void setExpiryDate(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.one_time_tokens.expiry_date</code>.
     */
    public LocalDateTime getExpiryDate() {
        return (LocalDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OneTimeTokensRecord
     */
    public OneTimeTokensRecord() {
        super(JooqOneTimeTokens.ONE_TIME_TOKENS);
    }

    /**
     * Create a detached, initialised OneTimeTokensRecord
     */
    public OneTimeTokensRecord(UUID uuid, UUID userUuid, LocalDateTime expiryDate) {
        super(JooqOneTimeTokens.ONE_TIME_TOKENS);

        setUuid(uuid);
        setUserUuid(userUuid);
        setExpiryDate(expiryDate);
        resetTouchedOnNotNull();
    }
}
