/*
 * This file is generated by jOOQ.
 */
package club.ttg.dnd5.jooq.tables;


import club.ttg.dnd5.jooq.Indexes;
import club.ttg.dnd5.jooq.Keys;
import club.ttg.dnd5.jooq.Public;
import club.ttg.dnd5.jooq.tables.JooqBooks.BooksPath;
import club.ttg.dnd5.jooq.tables.JooqSpellSpeciesAffiliation.SpellSpeciesAffiliationPath;
import club.ttg.dnd5.jooq.tables.records.SpellRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JooqSpell extends TableImpl<SpellRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.spell</code>
     */
    public static final JooqSpell SPELL = new JooqSpell();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpellRecord> getRecordType() {
        return SpellRecord.class;
    }

    /**
     * The column <code>public.spell.url</code>.
     */
    public final TableField<SpellRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.spell.name</code>.
     */
    public final TableField<SpellRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.spell.english</code>.
     */
    public final TableField<SpellRecord, String> ENGLISH = createField(DSL.name("english"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.spell.alternative</code>.
     */
    public final TableField<SpellRecord, String> ALTERNATIVE = createField(DSL.name("alternative"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.spell.description</code>.
     */
    public final TableField<SpellRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.spell.image_url</code>.
     */
    public final TableField<SpellRecord, String> IMAGE_URL = createField(DSL.name("image_url"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.spell.is_hidden_entity</code>.
     */
    public final TableField<SpellRecord, Boolean> IS_HIDDEN_ENTITY = createField(DSL.name("is_hidden_entity"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.spell.created_at</code>.
     */
    public final TableField<SpellRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.spell.updated_at</code>.
     */
    public final TableField<SpellRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.spell.username</code>.
     */
    public final TableField<SpellRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.spell.level</code>.
     */
    public final TableField<SpellRecord, Long> LEVEL = createField(DSL.name("level"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.spell.casting_time</code>.
     */
    public final TableField<SpellRecord, JSONB> CASTING_TIME = createField(DSL.name("casting_time"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.spell.upper</code>.
     */
    public final TableField<SpellRecord, String> UPPER = createField(DSL.name("upper"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.spell.source</code>.
     */
    public final TableField<SpellRecord, String> SOURCE = createField(DSL.name("source"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.spell.source_page</code>.
     */
    public final TableField<SpellRecord, Long> SOURCE_PAGE = createField(DSL.name("source_page"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.spell.school</code>.
     */
    public final TableField<SpellRecord, String> SCHOOL = createField(DSL.name("school"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.spell.additional_type</code>.
     */
    public final TableField<SpellRecord, String> ADDITIONAL_TYPE = createField(DSL.name("additional_type"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.spell.v</code>.
     */
    public final TableField<SpellRecord, Boolean> V = createField(DSL.name("v"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.spell.s</code>.
     */
    public final TableField<SpellRecord, Boolean> S = createField(DSL.name("s"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.spell.m</code>.
     */
    public final TableField<SpellRecord, JSONB> M = createField(DSL.name("m"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.spell.range</code>.
     */
    public final TableField<SpellRecord, JSONB> RANGE = createField(DSL.name("range"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.spell.duration</code>.
     */
    public final TableField<SpellRecord, JSONB> DURATION = createField(DSL.name("duration"), SQLDataType.JSONB, this, "");

    private JooqSpell(Name alias, Table<SpellRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JooqSpell(Name alias, Table<SpellRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.spell</code> table reference
     */
    public JooqSpell(String alias) {
        this(DSL.name(alias), SPELL);
    }

    /**
     * Create an aliased <code>public.spell</code> table reference
     */
    public JooqSpell(Name alias) {
        this(alias, SPELL);
    }

    /**
     * Create a <code>public.spell</code> table reference
     */
    public JooqSpell() {
        this(DSL.name("spell"), null);
    }

    public <O extends Record> JooqSpell(Table<O> path, ForeignKey<O, SpellRecord> childPath, InverseForeignKey<O, SpellRecord> parentPath) {
        super(path, childPath, parentPath, SPELL);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SpellPath extends JooqSpell implements Path<SpellRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SpellPath(Table<O> path, ForeignKey<O, SpellRecord> childPath, InverseForeignKey<O, SpellRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SpellPath(Name alias, Table<SpellRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SpellPath as(String alias) {
            return new SpellPath(DSL.name(alias), this);
        }

        @Override
        public SpellPath as(Name alias) {
            return new SpellPath(alias, this);
        }

        @Override
        public SpellPath as(Table<?> alias) {
            return new SpellPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SPELL_NAME_INDEX);
    }

    @Override
    public UniqueKey<SpellRecord> getPrimaryKey() {
        return Keys.PK_SPELL;
    }

    @Override
    public List<ForeignKey<SpellRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SPELL__FK_SPELL_ON_SOURCE);
    }

    private transient BooksPath _books;

    /**
     * Get the implicit join path to the <code>public.books</code> table.
     */
    public BooksPath books() {
        if (_books == null)
            _books = new BooksPath(this, Keys.SPELL__FK_SPELL_ON_SOURCE, null);

        return _books;
    }

    private transient SpellSpeciesAffiliationPath _spellSpeciesAffiliation;

    /**
     * Get the implicit to-many join path to the
     * <code>public.spell_species_affiliation</code> table
     */
    public SpellSpeciesAffiliationPath spellSpeciesAffiliation() {
        if (_spellSpeciesAffiliation == null)
            _spellSpeciesAffiliation = new SpellSpeciesAffiliationPath(this, null, Keys.SPELL_SPECIES_AFFILIATION__FK_SPESPEAFF_ON_SPELL.getInverseKey());

        return _spellSpeciesAffiliation;
    }

    @Override
    public JooqSpell as(String alias) {
        return new JooqSpell(DSL.name(alias), this);
    }

    @Override
    public JooqSpell as(Name alias) {
        return new JooqSpell(alias, this);
    }

    @Override
    public JooqSpell as(Table<?> alias) {
        return new JooqSpell(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqSpell rename(String name) {
        return new JooqSpell(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqSpell rename(Name name) {
        return new JooqSpell(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqSpell rename(Table<?> name) {
        return new JooqSpell(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqSpell where(Condition condition) {
        return new JooqSpell(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqSpell where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqSpell where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqSpell where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqSpell where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqSpell where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqSpell where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqSpell where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqSpell whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqSpell whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
