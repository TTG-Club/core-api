/*
 * This file is generated by jOOQ.
 */
package club.ttg.dnd5.jooq.tables;


import club.ttg.dnd5.jooq.Indexes;
import club.ttg.dnd5.jooq.Keys;
import club.ttg.dnd5.jooq.Public;
import club.ttg.dnd5.jooq.enums.SpeciesSize;
import club.ttg.dnd5.jooq.tables.JooqBooks.BooksPath;
import club.ttg.dnd5.jooq.tables.JooqSpeciesGallery.SpeciesGalleryPath;
import club.ttg.dnd5.jooq.tables.JooqSpellSpeciesAffiliation.SpellSpeciesAffiliationPath;
import club.ttg.dnd5.jooq.tables.records.SpeciesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JooqSpecies extends TableImpl<SpeciesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.species</code>
     */
    public static final JooqSpecies SPECIES = new JooqSpecies();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpeciesRecord> getRecordType() {
        return SpeciesRecord.class;
    }

    /**
     * The column <code>public.species.url</code>.
     */
    public final TableField<SpeciesRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.species.type</code>.
     */
    public final TableField<SpeciesRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.species.speed</code>.
     */
    public final TableField<SpeciesRecord, Integer> SPEED = createField(DSL.name("speed"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("30"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.species.fly</code>.
     */
    public final TableField<SpeciesRecord, Integer> FLY = createField(DSL.name("fly"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.species.climb</code>.
     */
    public final TableField<SpeciesRecord, Integer> CLIMB = createField(DSL.name("climb"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.species.swim</code>.
     */
    public final TableField<SpeciesRecord, Integer> SWIM = createField(DSL.name("swim"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.species.dark_vision</code>.
     */
    public final TableField<SpeciesRecord, Integer> DARK_VISION = createField(DSL.name("dark_vision"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.species.name</code>.
     */
    public final TableField<SpeciesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.species.english</code>.
     */
    public final TableField<SpeciesRecord, String> ENGLISH = createField(DSL.name("english"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.species.alternative</code>.
     */
    public final TableField<SpeciesRecord, String> ALTERNATIVE = createField(DSL.name("alternative"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.species.description</code>.
     */
    public final TableField<SpeciesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.species.image_url</code>.
     */
    public final TableField<SpeciesRecord, String> IMAGE_URL = createField(DSL.name("image_url"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.species.is_hidden_entity</code>.
     */
    public final TableField<SpeciesRecord, Boolean> IS_HIDDEN_ENTITY = createField(DSL.name("is_hidden_entity"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.species.created_at</code>.
     */
    public final TableField<SpeciesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.species.updated_at</code>.
     */
    public final TableField<SpeciesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.species.link_image_url</code>.
     */
    public final TableField<SpeciesRecord, String> LINK_IMAGE_URL = createField(DSL.name("link_image_url"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.species.parent_url</code>.
     */
    public final TableField<SpeciesRecord, String> PARENT_URL = createField(DSL.name("parent_url"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.species.species_size</code>.
     */
    public final TableField<SpeciesRecord, SpeciesSize[]> SPECIES_SIZE = createField(DSL.name("species_size"), SQLDataType.VARCHAR.asEnumDataType(SpeciesSize.class).array(), this, "");

    /**
     * The column <code>public.species.text</code>.
     */
    public final TableField<SpeciesRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.species.source</code>.
     */
    public final TableField<SpeciesRecord, String> SOURCE = createField(DSL.name("source"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.species.username</code>.
     */
    public final TableField<SpeciesRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.species.features</code>.
     */
    public final TableField<SpeciesRecord, JSONB> FEATURES = createField(DSL.name("features"), SQLDataType.JSONB, this, "");

    private JooqSpecies(Name alias, Table<SpeciesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JooqSpecies(Name alias, Table<SpeciesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.species</code> table reference
     */
    public JooqSpecies(String alias) {
        this(DSL.name(alias), SPECIES);
    }

    /**
     * Create an aliased <code>public.species</code> table reference
     */
    public JooqSpecies(Name alias) {
        this(alias, SPECIES);
    }

    /**
     * Create a <code>public.species</code> table reference
     */
    public JooqSpecies() {
        this(DSL.name("species"), null);
    }

    public <O extends Record> JooqSpecies(Table<O> path, ForeignKey<O, SpeciesRecord> childPath, InverseForeignKey<O, SpeciesRecord> parentPath) {
        super(path, childPath, parentPath, SPECIES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SpeciesPath extends JooqSpecies implements Path<SpeciesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SpeciesPath(Table<O> path, ForeignKey<O, SpeciesRecord> childPath, InverseForeignKey<O, SpeciesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SpeciesPath(Name alias, Table<SpeciesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SpeciesPath as(String alias) {
            return new SpeciesPath(DSL.name(alias), this);
        }

        @Override
        public SpeciesPath as(Name alias) {
            return new SpeciesPath(alias, this);
        }

        @Override
        public SpeciesPath as(Table<?> alias) {
            return new SpeciesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.NAME_INDEX);
    }

    @Override
    public UniqueKey<SpeciesRecord> getPrimaryKey() {
        return Keys.PK_SPECIES;
    }

    @Override
    public List<ForeignKey<SpeciesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SPECIES__FK_SPECIES_ON_PARENT, Keys.SPECIES__FK_SPECIES_ON_SOURCE);
    }

    private transient SpeciesPath _species;

    /**
     * Get the implicit join path to the <code>public.species</code> table.
     */
    public SpeciesPath species() {
        if (_species == null)
            _species = new SpeciesPath(this, Keys.SPECIES__FK_SPECIES_ON_PARENT, null);

        return _species;
    }

    private transient BooksPath _books;

    /**
     * Get the implicit join path to the <code>public.books</code> table.
     */
    public BooksPath books() {
        if (_books == null)
            _books = new BooksPath(this, Keys.SPECIES__FK_SPECIES_ON_SOURCE, null);

        return _books;
    }

    private transient SpeciesGalleryPath _speciesGallery;

    /**
     * Get the implicit to-many join path to the
     * <code>public.species_gallery</code> table
     */
    public SpeciesGalleryPath speciesGallery() {
        if (_speciesGallery == null)
            _speciesGallery = new SpeciesGalleryPath(this, null, Keys.SPECIES_GALLERY__FK_SPECIES_GALLERY_ON_SPECIES.getInverseKey());

        return _speciesGallery;
    }

    private transient SpellSpeciesAffiliationPath _spellSpeciesAffiliation;

    /**
     * Get the implicit to-many join path to the
     * <code>public.spell_species_affiliation</code> table
     */
    public SpellSpeciesAffiliationPath spellSpeciesAffiliation() {
        if (_spellSpeciesAffiliation == null)
            _spellSpeciesAffiliation = new SpellSpeciesAffiliationPath(this, null, Keys.SPELL_SPECIES_AFFILIATION__FK_SPESPEAFF_ON_SPECIES.getInverseKey());

        return _spellSpeciesAffiliation;
    }

    @Override
    public JooqSpecies as(String alias) {
        return new JooqSpecies(DSL.name(alias), this);
    }

    @Override
    public JooqSpecies as(Name alias) {
        return new JooqSpecies(alias, this);
    }

    @Override
    public JooqSpecies as(Table<?> alias) {
        return new JooqSpecies(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqSpecies rename(String name) {
        return new JooqSpecies(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqSpecies rename(Name name) {
        return new JooqSpecies(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqSpecies rename(Table<?> name) {
        return new JooqSpecies(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqSpecies where(Condition condition) {
        return new JooqSpecies(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqSpecies where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqSpecies where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqSpecies where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqSpecies where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqSpecies where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqSpecies where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqSpecies where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqSpecies whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqSpecies whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
