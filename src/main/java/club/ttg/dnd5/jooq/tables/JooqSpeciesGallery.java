/*
 * This file is generated by jOOQ.
 */
package club.ttg.dnd5.jooq.tables;


import club.ttg.dnd5.jooq.Keys;
import club.ttg.dnd5.jooq.Public;
import club.ttg.dnd5.jooq.tables.JooqSpecies.SpeciesPath;
import club.ttg.dnd5.jooq.tables.records.SpeciesGalleryRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JooqSpeciesGallery extends TableImpl<SpeciesGalleryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.species_gallery</code>
     */
    public static final JooqSpeciesGallery SPECIES_GALLERY = new JooqSpeciesGallery();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpeciesGalleryRecord> getRecordType() {
        return SpeciesGalleryRecord.class;
    }

    /**
     * The column <code>public.species_gallery.species_id</code>.
     */
    public final TableField<SpeciesGalleryRecord, String> SPECIES_ID = createField(DSL.name("species_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.species_gallery.gallery_url</code>.
     */
    public final TableField<SpeciesGalleryRecord, String> GALLERY_URL = createField(DSL.name("gallery_url"), SQLDataType.VARCHAR(255), this, "");

    private JooqSpeciesGallery(Name alias, Table<SpeciesGalleryRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JooqSpeciesGallery(Name alias, Table<SpeciesGalleryRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.species_gallery</code> table reference
     */
    public JooqSpeciesGallery(String alias) {
        this(DSL.name(alias), SPECIES_GALLERY);
    }

    /**
     * Create an aliased <code>public.species_gallery</code> table reference
     */
    public JooqSpeciesGallery(Name alias) {
        this(alias, SPECIES_GALLERY);
    }

    /**
     * Create a <code>public.species_gallery</code> table reference
     */
    public JooqSpeciesGallery() {
        this(DSL.name("species_gallery"), null);
    }

    public <O extends Record> JooqSpeciesGallery(Table<O> path, ForeignKey<O, SpeciesGalleryRecord> childPath, InverseForeignKey<O, SpeciesGalleryRecord> parentPath) {
        super(path, childPath, parentPath, SPECIES_GALLERY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SpeciesGalleryPath extends JooqSpeciesGallery implements Path<SpeciesGalleryRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SpeciesGalleryPath(Table<O> path, ForeignKey<O, SpeciesGalleryRecord> childPath, InverseForeignKey<O, SpeciesGalleryRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SpeciesGalleryPath(Name alias, Table<SpeciesGalleryRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SpeciesGalleryPath as(String alias) {
            return new SpeciesGalleryPath(DSL.name(alias), this);
        }

        @Override
        public SpeciesGalleryPath as(Name alias) {
            return new SpeciesGalleryPath(alias, this);
        }

        @Override
        public SpeciesGalleryPath as(Table<?> alias) {
            return new SpeciesGalleryPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<SpeciesGalleryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SPECIES_GALLERY__FK_SPECIES_GALLERY_ON_SPECIES);
    }

    private transient SpeciesPath _species;

    /**
     * Get the implicit join path to the <code>public.species</code> table.
     */
    public SpeciesPath species() {
        if (_species == null)
            _species = new SpeciesPath(this, Keys.SPECIES_GALLERY__FK_SPECIES_GALLERY_ON_SPECIES, null);

        return _species;
    }

    @Override
    public JooqSpeciesGallery as(String alias) {
        return new JooqSpeciesGallery(DSL.name(alias), this);
    }

    @Override
    public JooqSpeciesGallery as(Name alias) {
        return new JooqSpeciesGallery(alias, this);
    }

    @Override
    public JooqSpeciesGallery as(Table<?> alias) {
        return new JooqSpeciesGallery(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqSpeciesGallery rename(String name) {
        return new JooqSpeciesGallery(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqSpeciesGallery rename(Name name) {
        return new JooqSpeciesGallery(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqSpeciesGallery rename(Table<?> name) {
        return new JooqSpeciesGallery(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqSpeciesGallery where(Condition condition) {
        return new JooqSpeciesGallery(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqSpeciesGallery where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqSpeciesGallery where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqSpeciesGallery where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqSpeciesGallery where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqSpeciesGallery where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqSpeciesGallery where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqSpeciesGallery where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqSpeciesGallery whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqSpeciesGallery whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
