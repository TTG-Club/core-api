/*
 * This file is generated by jOOQ.
 */
package club.ttg.dnd5.jooq.tables;


import club.ttg.dnd5.jooq.Keys;
import club.ttg.dnd5.jooq.Public;
import club.ttg.dnd5.jooq.tables.JooqBookAuthors.BookAuthorsPath;
import club.ttg.dnd5.jooq.tables.JooqSpecies.SpeciesPath;
import club.ttg.dnd5.jooq.tables.JooqSpell.SpellPath;
import club.ttg.dnd5.jooq.tables.JooqTranslationAuthors.TranslationAuthorsPath;
import club.ttg.dnd5.jooq.tables.records.BooksRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JooqBooks extends TableImpl<BooksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.books</code>
     */
    public static final JooqBooks BOOKS = new JooqBooks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BooksRecord> getRecordType() {
        return BooksRecord.class;
    }

    /**
     * The column <code>public.books.source_acronym</code>.
     */
    public final TableField<BooksRecord, String> SOURCE_ACRONYM = createField(DSL.name("source_acronym"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.books.created_at</code>.
     */
    public final TableField<BooksRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.books.updated_at</code>.
     */
    public final TableField<BooksRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.books.url</code>.
     */
    public final TableField<BooksRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.books.name</code>.
     */
    public final TableField<BooksRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.books.english_name</code>.
     */
    public final TableField<BooksRecord, String> ENGLISH_NAME = createField(DSL.name("english_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.books.alt_name</code>.
     */
    public final TableField<BooksRecord, String> ALT_NAME = createField(DSL.name("alt_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.books.description</code>.
     */
    public final TableField<BooksRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.books.type</code>.
     */
    public final TableField<BooksRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.books.book_date</code>.
     */
    public final TableField<BooksRecord, LocalDate> BOOK_DATE = createField(DSL.name("book_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.books.image</code>.
     */
    public final TableField<BooksRecord, String> IMAGE = createField(DSL.name("image"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.books.translation_date</code>.
     */
    public final TableField<BooksRecord, LocalDate> TRANSLATION_DATE = createField(DSL.name("translation_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.books.username</code>.
     */
    public final TableField<BooksRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255), this, "");

    private JooqBooks(Name alias, Table<BooksRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JooqBooks(Name alias, Table<BooksRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.books</code> table reference
     */
    public JooqBooks(String alias) {
        this(DSL.name(alias), BOOKS);
    }

    /**
     * Create an aliased <code>public.books</code> table reference
     */
    public JooqBooks(Name alias) {
        this(alias, BOOKS);
    }

    /**
     * Create a <code>public.books</code> table reference
     */
    public JooqBooks() {
        this(DSL.name("books"), null);
    }

    public <O extends Record> JooqBooks(Table<O> path, ForeignKey<O, BooksRecord> childPath, InverseForeignKey<O, BooksRecord> parentPath) {
        super(path, childPath, parentPath, BOOKS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BooksPath extends JooqBooks implements Path<BooksRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BooksPath(Table<O> path, ForeignKey<O, BooksRecord> childPath, InverseForeignKey<O, BooksRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BooksPath(Name alias, Table<BooksRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BooksPath as(String alias) {
            return new BooksPath(DSL.name(alias), this);
        }

        @Override
        public BooksPath as(Name alias) {
            return new BooksPath(alias, this);
        }

        @Override
        public BooksPath as(Table<?> alias) {
            return new BooksPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BooksRecord> getPrimaryKey() {
        return Keys.PK_BOOKS;
    }

    private transient BookAuthorsPath _bookAuthors;

    /**
     * Get the implicit to-many join path to the
     * <code>public.book_authors</code> table
     */
    public BookAuthorsPath bookAuthors() {
        if (_bookAuthors == null)
            _bookAuthors = new BookAuthorsPath(this, null, Keys.BOOK_AUTHORS__FK_BOOK_AUTHORS_ON_BOOK.getInverseKey());

        return _bookAuthors;
    }

    private transient SpeciesPath _species;

    /**
     * Get the implicit to-many join path to the <code>public.species</code>
     * table
     */
    public SpeciesPath species() {
        if (_species == null)
            _species = new SpeciesPath(this, null, Keys.SPECIES__FK_SPECIES_ON_SOURCE.getInverseKey());

        return _species;
    }

    private transient SpellPath _spell;

    /**
     * Get the implicit to-many join path to the <code>public.spell</code> table
     */
    public SpellPath spell() {
        if (_spell == null)
            _spell = new SpellPath(this, null, Keys.SPELL__FK_SPELL_ON_SOURCE.getInverseKey());

        return _spell;
    }

    private transient TranslationAuthorsPath _translationAuthors;

    /**
     * Get the implicit to-many join path to the
     * <code>public.translation_authors</code> table
     */
    public TranslationAuthorsPath translationAuthors() {
        if (_translationAuthors == null)
            _translationAuthors = new TranslationAuthorsPath(this, null, Keys.TRANSLATION_AUTHORS__FK_TRANSLATION_AUTHORS_ON_BOOK.getInverseKey());

        return _translationAuthors;
    }

    @Override
    public JooqBooks as(String alias) {
        return new JooqBooks(DSL.name(alias), this);
    }

    @Override
    public JooqBooks as(Name alias) {
        return new JooqBooks(alias, this);
    }

    @Override
    public JooqBooks as(Table<?> alias) {
        return new JooqBooks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqBooks rename(String name) {
        return new JooqBooks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqBooks rename(Name name) {
        return new JooqBooks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqBooks rename(Table<?> name) {
        return new JooqBooks(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqBooks where(Condition condition) {
        return new JooqBooks(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqBooks where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqBooks where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqBooks where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqBooks where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqBooks where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqBooks where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JooqBooks where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqBooks whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JooqBooks whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
