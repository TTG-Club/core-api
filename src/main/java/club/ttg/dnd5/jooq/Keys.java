/*
 * This file is generated by jOOQ.
 */
package club.ttg.dnd5.jooq;


import club.ttg.dnd5.jooq.tables.JooqBookAuthors;
import club.ttg.dnd5.jooq.tables.JooqBooks;
import club.ttg.dnd5.jooq.tables.JooqDatabasechangeloglock;
import club.ttg.dnd5.jooq.tables.JooqGlossary;
import club.ttg.dnd5.jooq.tables.JooqOneTimeTokens;
import club.ttg.dnd5.jooq.tables.JooqRoles;
import club.ttg.dnd5.jooq.tables.JooqSpecies;
import club.ttg.dnd5.jooq.tables.JooqSpeciesGallery;
import club.ttg.dnd5.jooq.tables.JooqSpell;
import club.ttg.dnd5.jooq.tables.JooqSpellSpeciesAffiliation;
import club.ttg.dnd5.jooq.tables.JooqTranslationAuthors;
import club.ttg.dnd5.jooq.tables.JooqUserRole;
import club.ttg.dnd5.jooq.tables.JooqUsers;
import club.ttg.dnd5.jooq.tables.records.BookAuthorsRecord;
import club.ttg.dnd5.jooq.tables.records.BooksRecord;
import club.ttg.dnd5.jooq.tables.records.DatabasechangeloglockRecord;
import club.ttg.dnd5.jooq.tables.records.GlossaryRecord;
import club.ttg.dnd5.jooq.tables.records.OneTimeTokensRecord;
import club.ttg.dnd5.jooq.tables.records.RolesRecord;
import club.ttg.dnd5.jooq.tables.records.SpeciesGalleryRecord;
import club.ttg.dnd5.jooq.tables.records.SpeciesRecord;
import club.ttg.dnd5.jooq.tables.records.SpellRecord;
import club.ttg.dnd5.jooq.tables.records.SpellSpeciesAffiliationRecord;
import club.ttg.dnd5.jooq.tables.records.TranslationAuthorsRecord;
import club.ttg.dnd5.jooq.tables.records.UserRoleRecord;
import club.ttg.dnd5.jooq.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.QOM.ForeignKeyRule;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BooksRecord> PK_BOOKS = Internal.createUniqueKey(JooqBooks.BOOKS, DSL.name("pk_books"), new TableField[] { JooqBooks.BOOKS.SOURCE_ACRONYM }, true);
    public static final UniqueKey<DatabasechangeloglockRecord> DATABASECHANGELOGLOCK_PKEY = Internal.createUniqueKey(JooqDatabasechangeloglock.DATABASECHANGELOGLOCK, DSL.name("databasechangeloglock_pkey"), new TableField[] { JooqDatabasechangeloglock.DATABASECHANGELOGLOCK.ID }, true);
    public static final UniqueKey<GlossaryRecord> PK_GLOSSARY = Internal.createUniqueKey(JooqGlossary.GLOSSARY, DSL.name("pk_glossary"), new TableField[] { JooqGlossary.GLOSSARY.URL }, true);
    public static final UniqueKey<OneTimeTokensRecord> PK_ONE_TIME_TOKENS = Internal.createUniqueKey(JooqOneTimeTokens.ONE_TIME_TOKENS, DSL.name("pk_one_time_tokens"), new TableField[] { JooqOneTimeTokens.ONE_TIME_TOKENS.UUID }, true);
    public static final UniqueKey<OneTimeTokensRecord> UC_ONE_TIME_TOKENS_USER_UUID = Internal.createUniqueKey(JooqOneTimeTokens.ONE_TIME_TOKENS, DSL.name("uc_one_time_tokens_user_uuid"), new TableField[] { JooqOneTimeTokens.ONE_TIME_TOKENS.USER_UUID }, true);
    public static final UniqueKey<RolesRecord> PK_ROLES = Internal.createUniqueKey(JooqRoles.ROLES, DSL.name("pk_roles"), new TableField[] { JooqRoles.ROLES.ID }, true);
    public static final UniqueKey<RolesRecord> UC_ROLES_NAME = Internal.createUniqueKey(JooqRoles.ROLES, DSL.name("uc_roles_name"), new TableField[] { JooqRoles.ROLES.NAME }, true);
    public static final UniqueKey<SpeciesRecord> PK_SPECIES = Internal.createUniqueKey(JooqSpecies.SPECIES, DSL.name("pk_species"), new TableField[] { JooqSpecies.SPECIES.URL }, true);
    public static final UniqueKey<SpellRecord> PK_SPELL = Internal.createUniqueKey(JooqSpell.SPELL, DSL.name("pk_spell"), new TableField[] { JooqSpell.SPELL.URL }, true);
    public static final UniqueKey<UsersRecord> PK_USERS = Internal.createUniqueKey(JooqUsers.USERS, DSL.name("pk_users"), new TableField[] { JooqUsers.USERS.UUID }, true);
    public static final UniqueKey<UsersRecord> UC_USERS_EMAIL = Internal.createUniqueKey(JooqUsers.USERS, DSL.name("uc_users_email"), new TableField[] { JooqUsers.USERS.EMAIL }, true);
    public static final UniqueKey<UsersRecord> UC_USERS_USERNAME = Internal.createUniqueKey(JooqUsers.USERS, DSL.name("uc_users_username"), new TableField[] { JooqUsers.USERS.USERNAME }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BookAuthorsRecord, BooksRecord> BOOK_AUTHORS__FK_BOOK_AUTHORS_ON_BOOK = Internal.createForeignKey(JooqBookAuthors.BOOK_AUTHORS, DSL.name("fk_book_authors_on_book"), new TableField[] { JooqBookAuthors.BOOK_AUTHORS.BOOK_ID }, Keys.PK_BOOKS, new TableField[] { JooqBooks.BOOKS.SOURCE_ACRONYM }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<OneTimeTokensRecord, UsersRecord> ONE_TIME_TOKENS__FK_ONE_TIME_TOKENS_ON_USER_UUID = Internal.createForeignKey(JooqOneTimeTokens.ONE_TIME_TOKENS, DSL.name("fk_one_time_tokens_on_user_uuid"), new TableField[] { JooqOneTimeTokens.ONE_TIME_TOKENS.USER_UUID }, Keys.PK_USERS, new TableField[] { JooqUsers.USERS.UUID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<SpeciesRecord, SpeciesRecord> SPECIES__FK_SPECIES_ON_PARENT = Internal.createForeignKey(JooqSpecies.SPECIES, DSL.name("fk_species_on_parent"), new TableField[] { JooqSpecies.SPECIES.PARENT_URL }, Keys.PK_SPECIES, new TableField[] { JooqSpecies.SPECIES.URL }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<SpeciesRecord, BooksRecord> SPECIES__FK_SPECIES_ON_SOURCE = Internal.createForeignKey(JooqSpecies.SPECIES, DSL.name("fk_species_on_source"), new TableField[] { JooqSpecies.SPECIES.SOURCE }, Keys.PK_BOOKS, new TableField[] { JooqBooks.BOOKS.SOURCE_ACRONYM }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<SpeciesGalleryRecord, SpeciesRecord> SPECIES_GALLERY__FK_SPECIES_GALLERY_ON_SPECIES = Internal.createForeignKey(JooqSpeciesGallery.SPECIES_GALLERY, DSL.name("fk_species_gallery_on_species"), new TableField[] { JooqSpeciesGallery.SPECIES_GALLERY.SPECIES_ID }, Keys.PK_SPECIES, new TableField[] { JooqSpecies.SPECIES.URL }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<SpellRecord, BooksRecord> SPELL__FK_SPELL_ON_SOURCE = Internal.createForeignKey(JooqSpell.SPELL, DSL.name("fk_spell_on_source"), new TableField[] { JooqSpell.SPELL.SOURCE }, Keys.PK_BOOKS, new TableField[] { JooqBooks.BOOKS.SOURCE_ACRONYM }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<SpellSpeciesAffiliationRecord, SpeciesRecord> SPELL_SPECIES_AFFILIATION__FK_SPESPEAFF_ON_SPECIES = Internal.createForeignKey(JooqSpellSpeciesAffiliation.SPELL_SPECIES_AFFILIATION, DSL.name("fk_spespeaff_on_species"), new TableField[] { JooqSpellSpeciesAffiliation.SPELL_SPECIES_AFFILIATION.SPECIES_AFFILIATION_URL }, Keys.PK_SPECIES, new TableField[] { JooqSpecies.SPECIES.URL }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<SpellSpeciesAffiliationRecord, SpellRecord> SPELL_SPECIES_AFFILIATION__FK_SPESPEAFF_ON_SPELL = Internal.createForeignKey(JooqSpellSpeciesAffiliation.SPELL_SPECIES_AFFILIATION, DSL.name("fk_spespeaff_on_spell"), new TableField[] { JooqSpellSpeciesAffiliation.SPELL_SPECIES_AFFILIATION.SPELL_URL }, Keys.PK_SPELL, new TableField[] { JooqSpell.SPELL.URL }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<TranslationAuthorsRecord, BooksRecord> TRANSLATION_AUTHORS__FK_TRANSLATION_AUTHORS_ON_BOOK = Internal.createForeignKey(JooqTranslationAuthors.TRANSLATION_AUTHORS, DSL.name("fk_translation_authors_on_book"), new TableField[] { JooqTranslationAuthors.TRANSLATION_AUTHORS.TRANSLATION_ID }, Keys.PK_BOOKS, new TableField[] { JooqBooks.BOOKS.SOURCE_ACRONYM }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<UserRoleRecord, RolesRecord> USER_ROLE__FK_USER_ROLE_ON_ROLE = Internal.createForeignKey(JooqUserRole.USER_ROLE, DSL.name("fk_user_role_on_role"), new TableField[] { JooqUserRole.USER_ROLE.ROLE_ID }, Keys.PK_ROLES, new TableField[] { JooqRoles.ROLES.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<UserRoleRecord, UsersRecord> USER_ROLE__FK_USER_ROLE_ON_USER = Internal.createForeignKey(JooqUserRole.USER_ROLE, DSL.name("fk_user_role_on_user"), new TableField[] { JooqUserRole.USER_ROLE.USER_UUID }, Keys.PK_USERS, new TableField[] { JooqUsers.USERS.UUID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
}
