name: Deploy
run-name: Deploy ${{github.ref_name == 'main' && 'Production' || 'Development'}} by @${{ github.actor }}

on:
  push:
    branches:
      - main
      - dev

  workflow_dispatch:

env:
  ENVIRONMENT_NAME: ${{github.ref_name == 'main' && 'prod' || 'dev'}}
  CONTAINER_NAME: ttg-next-api-${{env.ENVIRONMENT_NAME}}
  IMAGE_NAME: ${{secrets.DOCKER_HUB_USERNAME}}/${{env.CONTAINER_NAME}}
  NETWORK_NAME: ttg-next-network-${{env.ENVIRONMENT_NAME}}

concurrency:
  group: deploy-${{github.ref_name}}
  cancel-in-progress: false

jobs:
  build:
    name: Build to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: adopt
          java-version: 17
          cache: maven

      - name: Maven Install
        run: mvn -B clean install

      - uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_HUB_USERNAME}}
          password: ${{secrets.DOCKER_HUB_TOKEN}}

      - uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{env.IMAGE_NAME}}

  ssh:
    name: Update Server
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.TMWEB_SSH_HOST}}
          username: ${{secrets.TMWEB_SSH_USER}}
          key: ${{secrets.TMWEB_SSH_KEY}}
          port: ${{secrets.TMWEB_SSH_PORT}}
          script: |
            docker stop ${{env.CONTAINER_NAME}} && docker rm ${{env.CONTAINER_NAME}}
            docker pull ${{env.IMAGE_NAME}}
            docker run \
              --network ${{env.NETWORK_NAME}} \
              --ip ${{secrets.DOCKER_API_CONTAINER_IP}} \
              --name ${{env.CONTAINER_NAME}} \
              -d \
              -e spring.profiles.active=${{env.ENVIRONMENT_NAME}} \
              -e dbhost=${{secrets.DOCKER_MYSQL_IP}} \
              -e dbuser=${{secrets.DOCKER_MYSQL_USER}} \
              -e dbpassword=${{secrets.DOCKER_MYSQL_PASSWORD}} \
              -e emailpassword=${{secrets.EMAIL_PASSWORD}} \
              ${{env.IMAGE_NAME}}
            docker rmi $(docker images --filter "dangling=true" -q --no-trunc) &
