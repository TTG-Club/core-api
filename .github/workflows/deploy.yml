name: Deploy
run-name: Deploy by @${{ github.actor }}

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' || github.ref_name == 'dev' }}
    concurrency:
      group: build-${{ github.ref_name }}
      cancel-in-progress: true
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=pr,enabled=${{ github.event_name == 'pull_request' }}
            type=ref,event=branch,enabled=${{ github.event_name != 'pull_request' }}
            type=raw,value=latest,enabled=${{ github.ref_name == 'main' }}
          labels: |
            org.opencontainers.image.title=${{ github.repository }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - uses: docker/build-push-action@v6
        id: push
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ github.ref_name }}
          cache-to: type=gha,mode=min,scope=${{ github.ref_name }}

      - uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  update:
    name: Update Server
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' || github.ref_name == 'dev' }}
    concurrency:
      group: update-${{ github.ref_name == 'main' && 'prod' || 'dev' }}-server
      cancel-in-progress: false
    env:
      SERVICE_NAME: 5e24-${{ github.ref_name == 'main' && 'prod' || 'dev' }}-api
      CONFIG_FILE: ${{ secrets.BEGET_SSH_PATH }}/${{ github.ref_name == 'main' && 'prod' || 'dev' }}/5e24/compose.yaml
    steps:
      - uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.BEGET_SSH_HOST }}
          username: ${{ secrets.BEGET_SSH_USER }}
          key: ${{ secrets.BEGET_SSH_KEY }}
          port: ${{ secrets.BEGET_SSH_PORT }}
          script: |
            docker compose -f ${{ env.CONFIG_FILE }} pull ${{ env.SERVICE_NAME }} && \
            docker compose -f ${{ env.CONFIG_FILE }} up ${{ env.SERVICE_NAME }} \
              --no-deps \
              --detach \
              --wait \
              --wait-timeout 60
            
            DANGLING=$(docker images --filter "dangling=true" -q --no-trunc)
            if [ -n "$DANGLING" ]; then
              docker rmi $DANGLING || true
            fi
